# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

# Stage-1: Terraform Validate Stage
## Step-1: Publish Artifacts to Pipeline (Pipeline artifacts provide a way to share files between stages in a pipeline or between different pipelines. )
## Step-2: Install Latest Terraform (0.13.5) (Ideally not needed if we use default Ubuntu Agents)
## Step-3: Validate Terraform Manifests (terraform init, terraform validate)

stages:
- stage: TerraformValidate
  jobs:
   - job: TerraformValidateJob
     continueOnError: false
     steps:
       - task: PublishPipelineArtifact@1
         displayName: Publish Artifact
         inputs:
          targetPath: '$(Pipeline.Workspace)/terraform-manifests'
          artifact: 'terraform-manifests-out'
          publishLocation: 'pipeline'
       - task: TerraformInstaller@1
         displayName: Terraform Install
         inputs:
          terraformVersion: 'latest'
      
       - task: TerraformTaskV4@4
         displayName: Terraform Init
         inputs:
           provider: 'azurerm'
           command: 'init'
           workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
           backendAzureRmUseEnvironmentVariablesForAuthentication: false
           backendServiceArm: 'terraform-aks-azurerm-svc-con'
           backendAzureRmResourceGroupName: 'terraform-storage-rg'
           backendAzureRmStorageAccountName: 'terraformstatevamshi'
           backendAzureRmContainerName: 'tfstatefiles'
           backendAzureRmKey: 'aks-base-tfstate'
      
       - task: TerraformTaskV4@4
         displayName: Terraform validate
         inputs:
           provider: 'azurerm'
           command: 'validate'
           workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
        